" A sensible vimrc for Python and Go development with Ansible support.

" VUNDLE
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" Themes
Plugin 'mhartington/oceanic-next'

" Utils
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/TaskList.vim'
"Plugin 'Chiel92/vim-autoformat'

" Python
"Plugin 'vim-scripts/indentpython.vim'
Plugin 'nvie/vim-flake8'

" Go Lang
Plugin 'fatih/vim-go'

" Code completion
Plugin 'Valloric/YouCompleteMe'
Plugin 'davidhalter/jedi-vim'

" HTML
"  https://medium.com/vim-drops/be-a-html-ninja-with-emmet-for-vim-feee15447ef1
Plugin 'mattn/emmet-vim'

" Syntax
Plugin 'gabrielelana/vim-markdown'	" Markdown flavor implemented by Github

" Ansible / Jinja2
Plugin 'pearofducks/ansible-vim'

" Git
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

" SnipMate
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'garbas/vim-snipmate'
" Optional snippets
"Plugin 'honza/vim-snippets'
" Bootsrap4 snppets
"Plugin 'jvanja/vim-bootstrap4-snippets'

" base64
Plugin 'christianrondeau/vim-base64'

" Plugin for transparent editing of gpg encrypted files
Plugin 'jamessan/vim-gnupg'

" Indentation level
Plugin 'Yggdroot/indentLine'

" Status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set nocompatible                " Enables us Vim specific features
filetype off                    " Reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enable Auto indentation
set backspace=indent,eol,start  " Makes backspace key more powerful
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show pop-up menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
"set lazyredraw                  " Wait to redraw
set undolevels=1000				" How many undos
set undoreload=1000				" number of lines to save for undo
set history=1000				" Remember more commands and search history
set nofoldenable				" Don't fold by default
set tabstop=4					" Tabs will be displayed as 4 spaces
set shiftwidth=4
set expandtab
set ttimeoutlen=10				" Key code delays
set timeoutlen=1000				" Papping delays ms
set updatetime=100
set t_RV=						" Get rid of termresponse
set fo-=t						" Don't automatically wrap text when typing

" Auto reload vimrc when it's saved
autocmd! bufwritepost vimrc source %

" Enable to copy to clipboard for operations like yank, delete, change and put.
if has('unnamedplus')
	set clipboard^=unnamed
	set clipboard^=unnamedplus
endif

" This enables to undo files even if you exit Vim.
if has('persistent_undo')
	set undofile
	set undodir=~/.vim/undo/
endif

" Color scheme
syntax enable

" for vim 7
set t_Co=256
" for vim 8
if (has("termguicolors"))
	set termguicolors
endif

" 80 character's marker
"highlight ColorColumn ctermbg=gray
"set colorcolumn=80

"set cursorline
colorscheme OceanicNext

" Spell checking change highlighting to underline
highlight clear SpellBad
highlight SpellBad cterm=underline
highlight clear SpellRare
highlight SpellRare cterm=underline
highlight clear SpellCap
highlight SpellCap cterm=underline
highlight clear SpellLocal
highlight SpellLocal cterm=underline

" Custom Invisibles
"set list
set listchars=tab:»·,nbsp:+,trail:·,extends:→,precedes:←

""""""""""""""""""""""""""""""""""
" Templates & Languages settings "
""""""""""""""""""""""""""""""""""
function! LoadTemplate()
	" load a template based on the file extension
	silent 0r ~/.vim/templates/tmpl.%:e
endfunction

augroup templates
	autocmd!
	"Auto load while creating new files
	autocmd BufNewFile *.py call LoadTemplate()
	autocmd BufNewFile *.proto call LoadTemplate()
augroup END

autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertLeave * set nopaste " Disable paste mode when leaving Insert Mode
autocmd BufRead,BufNewFile */playbooks/*.yml set filetype=ansible
autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd FileType html setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd BufRead,BufNewFile *.proto set filetype=proto
autocmd BufNewFile,BufRead *.kubeconfig setlocal filetype=yaml
" call :GitGutter after committing using fugitive
autocmd BufWritePost * GitGutter

" F1-F12 key calls
" F2: Disable formatting when pasting large chunks of code.
set pastetoggle=<F2>

" F3: Toggle line numbers.
nnoremap <silent> <F3> :set number! number?<CR>
imap <silent> <F3> <C-o>:set number! number?<CR>

" F4: Toggle list (display unprintable characters).
nnoremap <silent> <F4> :set list! list?<CR>

" F5: Show NERDTree.
nnoremap <silent> <F5> :NERDTreeToggle<CR>

" F6: Show TagList.
nnoremap <silent> <F6> :TagbarToggle<CR>

" F7: Flake8 - static syntax and style checker for Python
autocmd FileType python map <buffer> <F7> :call Flake8()<CR>

" F8: Toggle indentation
nnoremap <silent> <F8> :IndentLinesToggle<cr>

" F12: Spell checking
" Once the cursor is on the word, use z=, and Vim will suggest a list of
" alternatives that it thinks may be correct.
map <silent> <F12> :set spell!<cr>

" Change the mapleader from \ to ,
let mapleader=","
" Map ; to : and save a million keystrokes ;)
nnoremap ; :

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Select all text in current buffer
map <Leader>a ggVG

" Re-indent entire buffer
map <leader>f gg=G

" Bind nohl
noremap <silent> <C-h> :nohl<CR>
vnoremap <silent> <C-h> :nohl<CR>
inoremap <silent> <C-h> :nohl<CR>

" Easy window navigation
" Navigating requires you to press Ctrl first, then a navigation keys
nnoremap <C-UP> <C-W><C-K>
nnoremap <C-DOWN> <C-W><C-J>
nnoremap <C-LEFT> <C-W><C-H>
nnoremap <C-RIGHT> <C-W><C-L>
" Navigating requires you to press Ctrl first, then h,j,k,l
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>

" Use + and - to increase or decrease split windows by a sane amount.
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" Tab navigation.
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt
noremap <Leader>0 :tablast<cr>

" Sorting
vnoremap <Leader>s :sort<CR>
vnoremap <Leader>n :sort n<CR>

" base64 - Fix for author reverse logic
vnoremap <silent> <leader>b2a :call base64#v_atob()<cr>
vnoremap <silent> <leader>a2b :call base64#v_btoa()<cr>

" Open file in browser
noremap <silent> <leader>p :exe ':silent !google-chrome %'<cr>:redraw!<CR>

" JSON formating
nmap =j :%!python -m json.tool<cr>

" HTML sytax on file
nmap =h :set syntax=html<cr>

" Remove all whitespace
map <Leader>w :%s/\s\+$//

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

""""""""""""""""""""""
"  Plugins settings  "
""""""""""""""""""""""

" Tasklist
" Use <Leader>t
let g:tlWindowPosition = 1
let g:tlTokenList = ['TODO', 'FIXME', 'BUG', 'XXX']

" Airline
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline_theme='oceanicnext'
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep=''
let g:airline_right_sep=''
"let g:airline_symbols.branch = 'git:'
let g:airline_symbols.branch = '⎇ '
let g:airline_symbols.linenr = 'LN:'
let g:airline_symbols.readonly = 'RO'
" Define which filetypes have special treatment of /* */ comments.
" let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#c_like_langs = ['c', 'cpp', 'go', 'javascript']

" Oceanic theme
let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1


" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_key_list_stop_completion = ['<C-y>', '<CR>']

" Jedi-vim
let g:jedi#show_call_signatures = 2
let g:jedi#use_splits_not_buffers = "right"
let g:jedi#usages_command = "<leader>u"
"let g:jedi#force_py_version = 3

" vim-go settings
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"

" indentLine
let g:indentLine_enabled = 0
let g:indentLine_setColors = 0
let g:indentLine_char = '│'

" emmet-vim
let g:user_emmet_leader_key=','
