" A sensible vimrc for Python and Go development with Ansible support.

" vim-plug installation if not exists
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Themes
Plug 'joshdick/onedark.vim'

" Utils
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'

" Syntax highlighting plugin for many languages.
Plug 'sheerun/vim-polyglot'

" Python
Plug 'nvie/vim-flake8'

" Go Lang
Plug 'fatih/vim-go'

" Autocompletion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Expanding abbreviations similar to emmet.
"  https://medium.com/vim-drops/be-a-html-ninja-with-emmet-for-vim-feee15447ef1
Plug 'mattn/emmet-vim'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" base64
Plug 'christianrondeau/vim-base64'

" Plug for transparent editing of gpg encrypted files
Plug 'jamessan/vim-gnupg'

" Indentation level
Plug 'Yggdroot/indentLine'

" Status line
Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'

"call vundle#end()
call plug#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set nocompatible                " Enables us Vim specific features
"filetype off                    " Reset filetype detection first ...
"filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enable Auto indentation
set backspace=indent,eol,start  " Makes backspace key more powerful
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show pop-up menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
"set lazyredraw                  " Wait to redraw
set undolevels=1000				" How many undos
set undoreload=1000				" number of lines to save for undo
set history=1000				" Remember more commands and search history
set nofoldenable				" Don't fold by default
set tabstop=4					" Tabs will be displayed as 4 spaces
set shiftwidth=4
set expandtab
set ttimeoutlen=10				" Key code delays
set timeoutlen=1000				" Papping delays ms
set updatetime=100              " Smaller updatetime for CursorHold & CursorHoldI
set t_RV=						" Get rid of termresponse
set fo-=t						" Don't automatically wrap text when typing
set cursorline                  " Highlight current line

" Auto reload vimrc when it's saved
autocmd! bufwritepost vimrc source %

" Enable to copy to clipboard for operations like yank, delete, change and put.
if has('unnamedplus')
    set clipboard^=unnamed
    set clipboard^=unnamedplus
endif

" This enables to undo files even if you exit Vim.
if has('persistent_undo')
    set undofile
    set undodir=~/.vim/undo/
endif

if executable('rg')
    set grepprg=rg\ --color=never
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
endif
set wildignore+=*/.git/*,*/tmp/*,*.swp

" Color scheme
syntax enable
set background=dark

if (has("termguicolors"))
    set termguicolors
endif

" 80 character's marker
"let &colorcolumn=join(range(80,999),",")
set colorcolumn=80

try
    colorscheme onedark
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme default
endtry

" Spell checking change highlighting to underline
highlight clear SpellBad
highlight SpellBad cterm=underline
highlight clear SpellRare
highlight SpellRare cterm=underline
highlight clear SpellCap
highlight SpellCap cterm=underline
highlight clear SpellLocal
highlight SpellLocal cterm=underline

" Custom Invisibles
set listchars=tab:»·,nbsp:+,trail:·,extends:→,precedes:←

" Languages settings
autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd BufRead,BufNewFile */playbooks/*.yml set filetype=ansible
autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd FileType json setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd FileType html,htmldjango setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd BufRead,BufNewFile *.proto set filetype=proto
autocmd BufNewFile,BufRead *.kubeconfig setlocal filetype=yaml
autocmd FileType c,go,python autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertLeave * set nopaste " Disable paste mode when leaving Insert Mode

" F1-F12 key calls
" F2: Disable formatting when pasting large chunks of code.
set pastetoggle=<F2>

" F3: Toggle line numbers.
nnoremap <silent> <F3> :silent set number! number?<CR>:GitGutterToggle<cr>
imap <silent> <F3> <C-o>:set number! number?<CR>

" F4: Toggle list (display unprintable characters).
nnoremap <silent> <F4> :silent set list! list?<CR>

" F5: Show NERDTree.
nnoremap <silent> <F5> :NERDTreeToggle<CR>

" F7: Flake8 - static syntax and style checker for Python
autocmd FileType python map <buffer> <F7> :call Flake8()<CR>

" F8: Toggle indentation
nnoremap <silent> <F8> :IndentLinesToggle<cr>

" F9: Grep word under cursor
map <F9> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

" F12: Spell checking
" Once the cursor is on the word, use z=, and Vim will suggest a list of
" alternatives that it thinks may be correct.
map <silent> <F12> :set spell!<cr>

" Change the mapleader from \ to ,
let mapleader=","
" Map ; to : and save a million keystrokes ;)
nnoremap ; :

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Select all text in current buffer
map <Leader>a ggVG

" Re-indent entire buffer
map <leader>f gg=G

" Bind nohl
noremap <silent> <C-h> :nohl<CR>
vnoremap <silent> <C-h> :nohl<CR>
inoremap <silent> <C-h> :nohl<CR>

" Easy window navigation
" Navigating requires you to press Ctrl first, then a navigation keys
nnoremap <C-UP> <C-W><C-K>
nnoremap <C-DOWN> <C-W><C-J>
nnoremap <C-LEFT> <C-W><C-H>
nnoremap <C-RIGHT> <C-W><C-L>
" Navigating requires you to press Ctrl first, then h,j,k,l
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>

" Use + and - to increase or decrease split windows by a sane amount.
nnoremap <silent> + :exe "resize +10"<CR>
nnoremap <silent> - :exe "resize -10"<CR>
nnoremap <silent> <Leader>+ :exe "vertical resize +10"<CR>
nnoremap <silent> <Leader>- :exe "vertical resize -10"<CR>

" Tab navigation.
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt
noremap <Leader>0 :tablast<cr>

" Sorting
vnoremap <Leader>s :sort<CR>
vnoremap <Leader>n :sort n<CR>

" base64 - Fix for author reverse logic
vnoremap <silent> <leader>b2a :call base64#v_atob()<cr>
vnoremap <silent> <leader>a2b :call base64#v_btoa()<cr>

" Open file in browser
noremap <silent> <leader>p :exe ':silent !google-chrome %'<cr>:redraw!<CR>

" JSON formating
"nmap =j :%!python -m json.tool<cr>
nmap =j :set syntax=json<cr>

" HTML sytax on file
nmap =h :set syntax=html<cr>

" YAML sytax on file
nmap =y :set syntax=yaml<cr>

" Docker sytax on file
nmap =d :set syntax=dockerfile<cr>

"vim-fugitive
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gp :Gpush<cr>:GitGutter<cr>
nmap <leader>gd :Gdiff<cr>

" Remove all whitespace
map <Leader>w :%s/\s\+$//

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

""""""""""""""""""""""
"  Plugins settings  "
""""""""""""""""""""""

" Airline
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:airline_theme='onedark'

if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif

let g:airline_left_sep=''
let g:airline_right_sep=''
" let g:airline_symbols.branch = 'git:'
let g:airline_symbols.branch = '⎇ '
let g:airline_symbols.linenr = ' LN:'
let g:airline_symbols.colnr = ' CN:'
"let g:airline_symbols.linenr = '¶'
let g:airline_symbols.readonly = 'RO'
"let g:airline_symbols.whitespace = 'Ξ'
"let g:airline_symbols.maxlinenr= ''
" Define which filetypes have special treatment of /* */ comments.
" let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#c_like_langs = ['c', 'cpp', 'go', 'javascript']

" vim-go settings
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"

" indentLine
let g:indentLine_enabled = 0
let g:indentLine_setColors = 0
let g:indentLine_char = '│'

" emmet-vim
let g:user_emmet_leader_key=','

" vim-flake8
let g:flake8_quickfix_height=12

" NERDTree
let NERDTreeShowHidden=1

" coc.nvim
let g:coc_global_extensions = ['coc-sh', 'coc-git', 'coc-tsserver', 'coc-json', 'coc-html', 'coc-css', 'coc-pyright', 'coc-go']
