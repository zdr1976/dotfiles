
" A sensible vimrc for Python, Arduino and Go development

" VUNDLE
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" Utils
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/TaskList.vim'
Plugin 'majutsushi/tagbar'

" Python
Plugin 'klen/python-mode'

" Code completion
Plugin 'davidhalter/jedi-vim'		" Python autocompletion

" Syntax
Plugin 'gabrielelana/vim-markdown'	" Markdown flavor implemented by Github
"Plugin 'w0rp/ale'					" Asynchronous Lint Engine

" Asible / Jinja2
Plugin 'pearofducks/ansible-vim'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set nocompatible                " Enables us Vim specific features
filetype off                    " Reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enabile Autoindent
set backspace=indent,eol,start  " Makes backspace key more powerful.
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set lazyredraw                  " Wait to redraw
set undolevels=1000				" How many undos
set undoreload=1000				" number of lines to save for undo
set history=1000				" Remember more commands and search history
set nofoldenable				" Don't fold by default
set tabstop=4					" Tabs will be displayed as 4 spaces
set ttimeoutlen=10				" Key code delays
set timeoutlen=1000				" Papping delays ms
set t_RV=						" Get rid of termresponse
set fo-=t						" Don't automatically wrap text when typing


" Auto reload vimrc when it's saved
autocmd! bufwritepost vimrc source %

" Enable to copy to clipboard for operations like yank, delete, change and
" put.
if has('unnamedplus')
	set clipboard^=unnamed
	set clipboard^=unnamedplus
endif

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
	set undofile
	set undodir=~/.vim/undo/
endif

" Colorscheme
syntax enable
set t_Co=256
"set cursorline			" Highlight current line
"set colorcolumn=100		" Highlight 100th column
"highlight ColorColumn ctermbg=233
colorscheme wombat256mod
"let g:rehash256 = 1
"let g:molokai_original = 1
"colorscheme molokai

" Custom Invisibles
"set list
set listchars=tab:»·,trail:⋅,nbsp:¤

" Functions
function! LoadTemplate()
	" load a template based on the file extension
	silent 0r ~/.vim/templates/tmpl.%:e
endfunction

""""""""""""""""""""""""""""""""""
" Tamplates & Languages settings "
""""""""""""""""""""""""""""""""""

augroup templates
	autocmd!
	"Auto load wile creating new files
	autocmd BufNewFile *.py call LoadTemplate()
augroup END

autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertLeave * set nopaste " Disable paste mode when leaving Insert Mode
autocmd BufRead,BufNewFile */playbooks/*.yml set filetype=ansible
autocmd FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" F1-F12 key calls
" F2: Disable formatting when pasting large chunks of code.
set pastetoggle=<F2>

" F3: Toggle line numbers.
nnoremap <silent> <F3> :set number! number?<CR>
imap <silent> <F3> <C-o>:set number! number?<CR>

" F4: Toggle list (display unprintable characters).
nnoremap <silent> <F4> :set list! list?<CR>

" F5: Show NERDTree.
nnoremap <silent> <F5> :NERDTreeToggle<CR>

" F6: Show TagList.
nnoremap <silent> <F6> :TagbarToggle<CR>

" F12: Spell checking
" Once the cursor is on the word, use z=, and Vim will suggest a list of
" alternatives that it thinks may be correct.
map <silent> <F12> :set spell!<cr>

" Change the mapleader from \ to ,
let mapleader=","
" Map ; to : and save a million keystrokes ;)
nnoremap ; :

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Select all text in current buffer
map <Leader>a ggVG

" Bind nohl
noremap <silent> <C-h> :nohl<CR>
vnoremap <silent> <C-h> :nohl<CR>
inoremap <silent> <C-h> :nohl<CR>

" Easy window navigation
" Navigating requires you to press Ctrl first, then a navigation keys
nnoremap <C-UP> <C-W><C-K>
nnoremap <C-DOWN> <C-W><C-J>
nnoremap <C-LEFT> <C-W><C-H>
nnoremap <C-RIGHT> <C-W><C-L>
" Navigating requires you to press Ctrl first, then h,j,k,l
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>

" Use + and - to increase or decrease split windows by a sane amount.
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt
noremap <Leader>0 :tablast<cr>
"vnoremap <Leader>s :sort<CR>
"vnoremap <Leader>n :sort n<CR>
"noremap <Leader>c :noautocmd vimgrep /TODO\|FIXME\|BUG\|XXX/j ** <CR>:cw<CR>

" Remove all whitespace
map <Leader>w :%s/\s\+$//

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

"""""""""""""""""""""
"      Plugins      "
"""""""""""""""""""""

" Tasklist
" Use <Leader>t
let g:tlWindowPosition = 1
let g:tlTokenList = ['TODO', 'FIXME', 'BUG', 'XXX']

" Jedi
let g:jedi#show_call_signatures = 2
let g:jedi#force_py_version = 3

" Airline
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_buffers = 0 " Working with Tabs instead of buffers
"let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_close_button = 0

" Another nice themes (+ = nice, * = favorite)
" +badwolf, *base16_bright, base16color, base16_monokai
" base16_pop, *cool, *hybridline, jellybeans, murmur,
" +papercolor, *powerlineish, *ravenpower
let g:airline_theme='ravenpower'

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_left_sep=''
let g:airline_right_sep=''
"let g:airline_symbols.branch = 'git:'
let g:airline_symbols.branch = '⎇ '
let g:airline_symbols.linenr = 'LN:'
let g:airline_symbols.readonly = 'RO'

" Define which filetypes have special treatment of /* */ comments.
" let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#c_like_langs = ['c', 'cpp', 'go', 'javascript']

"
" python-mode
"
let g:pymode_python = 'python3'
let g:pymode_rope = 0
let g:pymode_doc = 0
let g:pymode_folding = 0
let g:pymode_virtualenv = 1
let g:pymode_trim_whitespaces = 1
let g:pymode_options_colorcolumn = 0

"Linting
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_unmodified = 0
" http://pep8.readthedocs.io/en/release-1.7.x/intro.html#error-codes
" http://flake8.pycqa.org/en/latest/user/error-codes.html
let g:pymode_lint_checkers = ['pyflakes', 'pep8',]
" Ignore
" - line too long (82 > 79 characters)
" - module level import not at top of file,
let g:pymode_lint_ignore = ['E501', 'E402', ]

" Debugger breakpoint
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
